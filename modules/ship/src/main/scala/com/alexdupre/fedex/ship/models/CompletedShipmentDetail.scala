package com.alexdupre.fedex.ship.models

import io.circe.syntax.*
import io.circe.{Decoder, Encoder, HCursor, JsonObject}

/** Returns the result of processing the desired package as a single-package shipment.
  *
  * @param completedPackageDetails
  *   Indicates the completed package details.
  * @param carrierCode
  *   Specify the four letter code of a FedEx operating company that meets your requirements<br>Examples of FedEx Operating Companies
  *   are:<ul><li>FDXE - FedEx Express</li><li>FDXG - FedEx Ground</li><li>FXSP - FedEx SmartPost</li><li>FXCC - FedEx Custom
  *   Critical.</li></ul>
  * @param packagingDescription
  *   Specifies packaging description<br>Example: Customer Packaging
  * @param usDomestic
  *   Indicates whether or not this is an intra-U.S. shipment.
  * @param exportComplianceStatement
  *   For US export shipments requiring an EEI, enter the ITN number received from AES when you filed your shipment or the FTR (Foreign
  *   Trade Regulations) exemption number.The proper format for an ITN number is AES XYYYYMMDDNNNNNN where YYYYMMDD is date and NNNNNN are
  *   numbers generated by the AES.<br> Example: AESX20220714987654<br>Note: The ITN or FTR exemption number you submit in the ship request
  *   prints on the international shipping label.<br><br>For CA export shipments,it can be Proof of report number(15-32 alphanumeric) ,
  *   Summary proof of report number(7-32 alphanumeric) or Exemption number(2 digit) based on the selected b13AFilingOption.<br>Example:
  *   98765432107654321(POR number), 7654321(Summary POR number) and 02(Exemption number).<br>For FTR exemption number you need provide a
  *   predefined value as NO_EEI_30_37_A.
  */
case class CompletedShipmentDetail(
    completedPackageDetails: Option[Seq[CompletedPackageDetail]] = None,
    operationalDetail: Option[ShipmentOperationalDetail] = None,
    carrierCode: Option[String] = None,
    completedHoldAtLocationDetail: Option[CompletedHoldAtLocationDetail] = None,
    completedEtdDetail: Option[CompletedEtdDetail] = None,
    packagingDescription: Option[String] = None,
    masterTrackingId: Option[TrackingId] = None,
    serviceDescription: Option[ServiceDescription] = None,
    usDomestic: Option[Boolean] = None,
    hazardousShipmentDetail: Option[CompletedHazardousShipmentDetail] = None,
    shipmentRating: Option[ShipmentRating] = None,
    documentRequirements: Option[DocumentRequirementsDetail] = None,
    exportComplianceStatement: Option[String] = None,
    accessDetail: Option[PendingShipmentAccessDetail] = None
)

object CompletedShipmentDetail {

  given Encoder[CompletedShipmentDetail] = new Encoder.AsObject[CompletedShipmentDetail] {
    final def encodeObject(o: CompletedShipmentDetail): JsonObject = {
      JsonObject.fromIterable(
        Vector(
          "completedPackageDetails"       -> o.completedPackageDetails.asJson,
          "operationalDetail"             -> o.operationalDetail.asJson,
          "carrierCode"                   -> o.carrierCode.asJson,
          "completedHoldAtLocationDetail" -> o.completedHoldAtLocationDetail.asJson,
          "completedEtdDetail"            -> o.completedEtdDetail.asJson,
          "packagingDescription"          -> o.packagingDescription.asJson,
          "masterTrackingId"              -> o.masterTrackingId.asJson,
          "serviceDescription"            -> o.serviceDescription.asJson,
          "usDomestic"                    -> o.usDomestic.asJson,
          "hazardousShipmentDetail"       -> o.hazardousShipmentDetail.asJson,
          "shipmentRating"                -> o.shipmentRating.asJson,
          "documentRequirements"          -> o.documentRequirements.asJson,
          "exportComplianceStatement"     -> o.exportComplianceStatement.asJson,
          "accessDetail"                  -> o.accessDetail.asJson
        )
      )
    }
  }.mapJson(_.dropNullValues)
  given Decoder[CompletedShipmentDetail] = (c: HCursor) => {
    for {
      completedPackageDetails       <- c.downField("completedPackageDetails").as[Option[Seq[CompletedPackageDetail]]]
      operationalDetail             <- c.downField("operationalDetail").as[Option[ShipmentOperationalDetail]]
      carrierCode                   <- c.downField("carrierCode").as[Option[String]]
      completedHoldAtLocationDetail <- c.downField("completedHoldAtLocationDetail").as[Option[CompletedHoldAtLocationDetail]]
      completedEtdDetail            <- c.downField("completedEtdDetail").as[Option[CompletedEtdDetail]]
      packagingDescription          <- c.downField("packagingDescription").as[Option[String]]
      masterTrackingId              <- c.downField("masterTrackingId").as[Option[TrackingId]]
      serviceDescription            <- c.downField("serviceDescription").as[Option[ServiceDescription]]
      usDomestic                    <- c.downField("usDomestic").as[Option[Boolean]]
      hazardousShipmentDetail       <- c.downField("hazardousShipmentDetail").as[Option[CompletedHazardousShipmentDetail]]
      shipmentRating                <- c.downField("shipmentRating").as[Option[ShipmentRating]]
      documentRequirements          <- c.downField("documentRequirements").as[Option[DocumentRequirementsDetail]]
      exportComplianceStatement     <- c.downField("exportComplianceStatement").as[Option[String]]
      accessDetail                  <- c.downField("accessDetail").as[Option[PendingShipmentAccessDetail]]
    } yield CompletedShipmentDetail(
      completedPackageDetails,
      operationalDetail,
      carrierCode,
      completedHoldAtLocationDetail,
      completedEtdDetail,
      packagingDescription,
      masterTrackingId,
      serviceDescription,
      usDomestic,
      hazardousShipmentDetail,
      shipmentRating,
      documentRequirements,
      exportComplianceStatement,
      accessDetail
    )
  }
}
